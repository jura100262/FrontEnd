 онцепци€ задач очень проста. Ќазвание асинхронной javascript функции равно названию задачи, и работает она по принципу: 
* берет данные, 
* трансформирует их 
* и записывает результат.

—оздадим три папки:
* build Ч оптимизированные файлы дл€ использовани€ на сервере
* src Ч рабоча€ папка, где будут хранитьс€ все наши исходники
* gulp Ч здесь будут хранитьс€ наши tasks

≈ще добавим файл .gitignore, чтобы системные файлы не попадали в репозиторий..

Ќе забудьте установить gulp: npm install --save-dev gulp

2. –аздел€ем HTML

будут две тестовые страницы about и index. —труктура на страницах повтор€етс€: есть блоки <footer>, <header>, <head>. ѕоэтому все нужно вынести в отдельные  модули.

* pages Ч папка дл€ наших страниц, где в корне хран€тс€ непосредственно страницы
* common Ч хран€тс€ общие блоки дл€ всех страниц
* includes Ч хран€тс€ модули страниц, где внутри еще одна папка, котора€ соответствует названию страницы

layout.pug Ч шаблон, который хранит основную структуру, и от него наследуютс€ все другие страницы

index.pug и about.pug Ч наши страницы, которые наследуютс€ от шаблона и подключают свои контентные модули

